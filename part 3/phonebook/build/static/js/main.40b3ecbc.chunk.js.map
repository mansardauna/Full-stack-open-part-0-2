{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["Filter","value","onChange","PersonForm","data","onFormSubmit","newName","setNewName","newNumber","setNewNumber","onSubmit","e","target","autoFocus","type","Persons","personsFilter","deletePerson","map","person","key","id","name","number","style","marginLeft","onClick","Notification","message","className","text","baseUrl","axios","get","then","response","newObject","post","delete","put","App","useState","persons","setPersons","searchPerson","setNewSearch","setPersonsFilter","setMessage","useEffect","PhoneService","returnedPersons","setTimeout","formData","preventDefault","currentPerson","filter","length","returnedPerson","newPersons","concat","catch","error","window","confirm","err","toLowerCase","search","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.40b3ecbc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <p>\r\n      filter shown with\r\n      <input value={value} onChange={onChange} />\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({\r\n  data: { onFormSubmit, newName, setNewName, newNumber, setNewNumber },\r\n}) => {\r\n  return (\r\n    <form onSubmit={onFormSubmit}>\r\n      <div>\r\n        name:\r\n        <input\r\n          value={newName}\r\n          onChange={(e) => setNewName(e.target.value)}\r\n          autoFocus\r\n        />\r\n      </div>\r\n      <div>\r\n        number:\r\n        <input\r\n          value={newNumber}\r\n          onChange={(e) => setNewNumber(e.target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Persons = ({ personsFilter, deletePerson }) => {\r\n  return personsFilter.map((person) => (\r\n    <p key={person.id}>\r\n      {person.name} <span>{person.number}</span>\r\n      <button\r\n        style={{ marginLeft: \"10px\" }}\r\n        onClick={() => deletePerson(person)}\r\n      >\r\n        delete\r\n      </button>\r\n    </p>\r\n  ));\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\n\r\nexport default Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={`notification notification--${message.type}`}>\r\n      {message.text}\r\n    </div>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  deletePerson,\r\n  update,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Persons from \"./components/Persons\";\r\nimport Notification from \"./components/Notification\";\r\nimport PhoneService from \"./services/phonebook\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [searchPerson, setNewSearch] = useState(\"\");\r\n  const [personsFilter, setPersonsFilter] = useState(persons);\r\n  const [message, setMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    PhoneService.getAll().then((returnedPersons) => {\r\n      setPersons(returnedPersons);\r\n      setPersonsFilter(returnedPersons);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 10000);\r\n  }, [message]);\r\n\r\n  const filterPersons = (e) => {\r\n    const searchPerson = e.target.value;\r\n    setNewSearch(searchPerson);\r\n    const newPersons = persons.filter(\r\n      (person) =>\r\n        person.name.toLowerCase().search(searchPerson.toLowerCase()) !== -1\r\n    );\r\n    setPersonsFilter(newPersons);\r\n  };\r\n\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    setNewName(\"\");\r\n    setNewNumber(\"\");\r\n    const currentPerson = persons.filter((person) => person.name === newName);\r\n    if (currentPerson.length === 1) {\r\n      if (\r\n        window.confirm(\r\n          `${currentPerson[0].name} is already added to phonebook, replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        PhoneService.update(currentPerson[0].id, {\r\n          name: newName,\r\n          number: newNumber,\r\n        })\r\n          .then((returnedPerson) => {\r\n            const newPersons = persons.map((person) =>\r\n              person.id !== returnedPerson.id ? person : returnedPerson\r\n            );\r\n            setPersons(newPersons);\r\n            setPersonsFilter(newPersons);\r\n            setMessage({\r\n              text: `Update ${returnedPerson.name}`,\r\n              type: \"success\",\r\n            });\r\n          })\r\n          .catch((err) => {\r\n            setMessage({\r\n              text: `${newName} was already removed from server`,\r\n              type: \"error\",\r\n            });\r\n          });\r\n      }\r\n      return;\r\n    }\r\n\r\n    PhoneService.create({ name: newName, number: newNumber })\r\n      .then((returnedPerson) => {\r\n        const newPersons = persons.concat(returnedPerson);\r\n        setPersons(newPersons);\r\n        setPersonsFilter(newPersons);\r\n        setMessage({ text: `Create ${newName}`, type: \"success\" });\r\n      })\r\n      .catch((error) => {\r\n        setMessage({\r\n          text: error.response.data.error,\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const deletePerson = ({ id, name }) => {\r\n    if (window.confirm(`Delete ${name}?`)) {\r\n      PhoneService.deletePerson(id)\r\n        .then((response) => {\r\n          const newPersons = persons.filter((person) => person.id !== id);\r\n          setPersons(newPersons);\r\n          setPersonsFilter(newPersons);\r\n          setMessage({ text: `Delete ${name}`, type: \"success\" });\r\n        })\r\n        .catch((err) => {\r\n          setMessage({\r\n            text: `${name} was already removed from server`,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const formData = {\r\n    onFormSubmit,\r\n    newName,\r\n    setNewName,\r\n    newNumber,\r\n    setNewNumber,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message} />\r\n      <Filter value={searchPerson} onChange={filterPersons} />\r\n      <h3>Add a new</h3>\r\n      <PersonForm data={formData} />\r\n      <h3>Numbers</h3>\r\n      <Persons personsFilter={personsFilter} deletePerson={deletePerson} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}